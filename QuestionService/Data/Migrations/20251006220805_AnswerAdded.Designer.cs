// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QuestionService.Data;

#nullable disable

namespace QuestionService.Data.Migrations
{
    [DbContext(typeof(QuestionDbContext))]
    [Migration("20251006220805_AnswerAdded")]
    partial class AnswerAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("QuestionService.Models.Answer", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<bool>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserDisplayName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("QuestionService.Models.Question", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<int>("AnswerCount")
                        .HasColumnType("integer");

                    b.Property<string>("AskerDisplayName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("AskerId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasAcceptedAnswer")
                        .HasColumnType("boolean");

                    b.PrimitiveCollection<List<string>>("TagSlugs")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer");

                    b.Property<int>("Votes")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuestionService.Models.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("UsageCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = "dog-care",
                            Description = "Questions about feeding, grooming, exercise, training, and health for dogs of all breeds and sizes.",
                            Name = "Dog Care",
                            Slug = "dog-care",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = "cat-care",
                            Description = "Tips and advice for caring for cats, including litter training, diet, scratching behavior, and vet visits.",
                            Name = "Cat Care",
                            Slug = "cat-care",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = "small-animals",
                            Description = "Care for rabbits, guinea pigs, hamsters, ferrets, and other small pets including housing, diet, and play.",
                            Name = "Small Animals",
                            Slug = "small-animals",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = "fish-care",
                            Description = "Aquarium setup, water quality, species compatibility, and health care for freshwater and saltwater fish.",
                            Name = "Fish & Aquatic Pets",
                            Slug = "fish-care",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = "exotic-pets",
                            Description = "Care and handling information for reptiles, amphibians, birds, and other exotic or uncommon pets.",
                            Name = "Exotic Pets",
                            Slug = "exotic-pets",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = "pet-health",
                            Description = "Medical and wellness topics: vaccinations, common illnesses, preventative care, and vet recommendations.",
                            Name = "Pet Health",
                            Slug = "pet-health",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = "pet-nutrition",
                            Description = "Questions on pet food, special diets, treats, supplements, and nutrition requirements by species.",
                            Name = "Pet Nutrition",
                            Slug = "pet-nutrition",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = "pet-grooming",
                            Description = "Bathing, brushing, nail trimming, and coat care for pets to keep them comfortable and healthy.",
                            Name = "Grooming",
                            Slug = "pet-grooming",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = "pet-safety",
                            Description = "Emergency care, first aid, toxic foods, and household hazards to watch out for with pets.",
                            Name = "Safety & First Aid",
                            Slug = "pet-safety",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = "pet-training",
                            Description = "Guidance on obedience training, housebreaking, behavioral issues, and positive reinforcement methods.",
                            Name = "Training & Behavior",
                            Slug = "pet-training",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = "working-dogs",
                            Description = "Training, care, and legal aspects of service dogs, therapy animals, police dogs, and other working companions.",
                            Name = "Working & Service Dogs",
                            Slug = "working-dogs",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = "pet-adoption",
                            Description = "Discussions around adopting pets, rescue organizations, fostering, and integrating new pets into a home.",
                            Name = "Adoption & Rescue",
                            Slug = "pet-adoption",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = "pet-housing",
                            Description = "Advice on cages, tanks, hutches, terrariums, and enclosures that keep pets safe and comfortable.",
                            Name = "Housing & Habitats",
                            Slug = "pet-housing",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = "pet-travel",
                            Description = "Tips for traveling safely with pets in cars, planes, or trains. Covers carriers, calming, regulations, and more.",
                            Name = "Travel with Pets",
                            Slug = "pet-travel",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = "pet-products",
                            Description = "Reviews and advice on toys, collars, leashes, beds, aquariums, and other pet supplies or equipment.",
                            Name = "Pet Products",
                            Slug = "pet-products",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = "pet-tech",
                            Description = "Discussion about smart collars, GPS trackers, feeders, cameras, and other tech designed for pets.",
                            Name = "Pet Tech & Gadgets",
                            Slug = "pet-tech",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = "pet-breeding",
                            Description = "Responsible breeding practices, pregnancy care, whelping, and raising litters.",
                            Name = "Breeding",
                            Slug = "pet-breeding",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = "pet-rescue-stories",
                            Description = "A place to share and learn from inspiring rescue and adoption experiences.",
                            Name = "Rescue Stories",
                            Slug = "pet-rescue-stories",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = "wildlife",
                            Description = "Dealing with pets interacting with wildlife—prevention, safety, and co-existence tips.",
                            Name = "Wildlife Encounters",
                            Slug = "wildlife",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = "pet-loss",
                            Description = "Support for coping with the loss of a beloved pet, memorial ideas, and community healing.",
                            Name = "Pet Loss & Grief",
                            Slug = "pet-loss",
                            UsageCount = 0
                        });
                });

            modelBuilder.Entity("QuestionService.Models.Answer", b =>
                {
                    b.HasOne("QuestionService.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuestionService.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
